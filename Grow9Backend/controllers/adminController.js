const bcrypt = require('bcryptjs');
const Admin = require('../models/adminModel'); // Import the Admin model
const { generateToken } = require('../config/jwt');
const verifyAdminToken = require('../middleware/authMiddleware');
const Sponsor = require('../models/SponsorRegisterationModel');

exports.loginAdmin = async (req, res) => {
  try {
    const { username, password } = req.body;

    // Validate input
    if (!username || !password) {
      return res.status(400).json({ message: 'Username and password are required' });
    }

    // Find admin in MongoDB
    const admin = await Admin.findOne({ username });

    if (!admin) {
      return res.status(401).json({ message: 'Invalid admin credentials' });
    }

    // Compare provided password with hashed password
    const isPasswordValid = await bcrypt.compare(password, admin.password);

    if (!isPasswordValid) {
      return res.status(401).json({ message: 'Invalid admin credentials' });
    }

    // Generate JWT token
    const token = generateToken(admin, 'admin');

    // Send response
    res.status(200).json({
      message: 'Login successful',
      token,
      user: { id: admin._id, username: admin.username, type: 'admin' },
    });
  } catch (error) {
    console.error('Admin login error:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
};


exports.registerSponsor = async (req, res) => {
  try {
    console.log("Enter 1")
    const { name, email, mobNumber, dob , password } = req.body;

    // Validation
    if (!name || !email || !mobNumber || !dob) {
      return res.status(400).json({ 
        message: 'All fields are required' 
      });
    }

    // Email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({ 
        message: 'Invalid email format' 
      });
    }

    // Check if sponsor already exists
    const existingSponsor = await Sponsor.findOne({ email });
    if (existingSponsor) {
      return res.status(409).json({ 
        message: 'Sponsor with this email already exists' 
      });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    // Create new sponsor - sponsorId is auto-generated by the schema
    const newSponsor = await Sponsor.findOneAndUpdate(
      { email }, // match by email
      {
        name,
        email,
        mobNumber,
        dob: new Date(dob),
        password:hashedPassword,
        registeredAt: new Date(),
      },
      { new: true, upsert: true, setDefaultsOnInsert: true }
    );
    console.log(newSponsor.sponsorId)
    console.log(newSponsor.name)
    // Return response with the generated sponsorId
    res.status(201).json({
      message: 'Sponsor registered successfully',
      sponsor: {
        sponsorId: newSponsor.sponsorId,  // The auto-generated UUID
        name: newSponsor.name,
        email: newSponsor.email,
        mobNumber: newSponsor.mobNumber,
        dob: newSponsor.dob,
        registeredAt: newSponsor.registeredAt
      }
    });

  } catch (error) {
    console.error('Sponsor registration error:', error);
    res.status(500).json({ 
      message: 'Internal server error',
      error: error.message 
    });
  }
};