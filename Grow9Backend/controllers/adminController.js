const bcrypt = require('bcryptjs');
const Admin = require('../models/adminModel'); // Import the Admin model
const { generateToken } = require('../config/jwt');
const Sponsor = require('../models/SponsorRegisterationModel');
const SponsorDailyEarning = require('../models/SponsorDailyEarningModel');
const AdminDailyGrowthPercentage = require('../models/dailyGrowthPercentageModel');
const Customer = require('../models/customerModel');

exports.loginAdmin = async (req, res) => {
  try {
    const { username, password } = req.body;

    // Validate input
    if (!username || !password) {
      return res.status(400).json({ message: 'Username and password are required' });
    }

    // Find admin in MongoDB
    const admin = await Admin.findOne({ username });

    if (!admin) {
      return res.status(401).json({ message: 'Invalid admin credentials' });
    }

    // Compare provided password with hashed password
    const isPasswordValid = await bcrypt.compare(password, admin.password);

    if (!isPasswordValid) {
      return res.status(401).json({ message: 'Invalid admin credentials' });
    }

    // Generate JWT token
    const token = generateToken(admin, 'admin');

    // Send response
    res.status(200).json({
      message: 'Login successful',
      token,
      user: { id: admin._id, username: admin.username, type: 'admin' },
    });
  } catch (error) {
    console.error('Admin login error:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
};


exports.registerSponsor = async (req, res) => {
  try {
    const { name, email, mobNumber, dob , password } = req.body;

    // Validation
    if (!name || !email || !mobNumber || !dob) {
      return res.status(400).json({ 
        message: 'All fields are required' 
      });
    }

    // Email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({ 
        message: 'Invalid email format' 
      });
    }

    // Check if sponsor already exists
    const existingSponsor = await Sponsor.findOne({ email });
    if (existingSponsor) {
      return res.status(409).json({ 
        message: 'Sponsor with this email already exists' 
      });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    // Create new sponsor - sponsorId is auto-generated by the schema
    const newSponsor = await Sponsor.findOneAndUpdate(
      { email }, // match by email
      {
        name,
        email,
        mobNumber,
        dob: new Date(dob),
        password:hashedPassword,
        registeredAt: new Date(),
      },
      { new: true, upsert: true, setDefaultsOnInsert: true }
    );
    // Return response with the generated sponsorId
    res.status(201).json({
      message: 'Sponsor registered successfully',
      sponsor: {
        sponsorId: newSponsor.sponsorId,  // The auto-generated UUID
        name: newSponsor.name,
        email: newSponsor.email,
        mobNumber: newSponsor.mobNumber,
        dob: newSponsor.dob,
        registeredAt: newSponsor.registeredAt
      }
    });

  } catch (error) {
    console.error('Sponsor registration error:', error);
    res.status(500).json({ 
      message: 'Internal server error',
      error: error.message 
    });
  }
};

exports.sponsorList = async (req, res) => {
  try {
    const sponsors = await Sponsor.find({});
    res.json({ sponsors });
  } catch (error) {
    res.status(500).json({ message: 'Error fetching sponsors', error: error.message });
  }
}


exports.adminEarningStats = async (req, res) => {
  const { interval } = req.params;

  try {
    // 1️⃣ Find earnings document for the sponsor
    const record = await SponsorDailyEarning.find();
    console.log(record);

    if (!record) {
      return res.status(404).json({ message: "No earnings found for this sponsor" });
    }

    // 2️⃣ Filter based on time range
    const now = new Date();
    let daysToShow = interval === '7days' ? 7 : interval === '30days' ? 30 : 90;
    const startDate = new Date();
    startDate.setDate(now.getDate() - daysToShow);

    let filteredRecords;
    for(const tempRecord of record){
      filteredRecords = tempRecord.records.filter(r => new Date(r.date) >= startDate);
    }

     // 4️⃣ Map records to same format as mock data
    const formattedData = filteredRecords.map(r => ({
      date: new Date(r.date).toISOString().split('T')[0],
      earnings: r.earnings,
      displayDate: r.displayDate || new Date(r.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })
    }));

   

    //Total Invested Amount 
    const result = await Customer.aggregate([         
      { $group: { _id: null, totalInvested: { $sum: "$AmountInvested" } } }
     ]);

    const totalInvested = result[0]?.totalInvested || 0;
     // 5️⃣ Compute stats
    const stats = calculateStats(formattedData,totalInvested);

    let DailyPercentageGrowth = await AdminDailyGrowthPercentage.find();


    console.log(DailyPercentageGrowth);
    DailyPercentageGrowth = DailyPercentageGrowth[0].Percentage;

    // 4️⃣ Respond with structured data
    return res.status(200).json({
      dailyEarnings: formattedData,
      stats,
      totalinvestment:totalInvested,
      DailyPercentageGrowth,
    });
  } catch (err) {
    console.error("Error fetching sponsor earnings:", err);
    return res.status(500).json({ message: "Server error fetching earnings", error: err.message });
  }
};

// 🔹 Helper function to calculate stats
const calculateStats = (records,totalInvested) => {
  const totalEarnings = records.reduce((sum, r) => sum + r.earnings, 0);

  return {
    totalEarnings,
    totalinvestment : totalInvested,
    daysCount: records.length,
  };
};


exports.updateDailyPercentage = async (req, res) => {
  try {
    const { newPercentage } = req.body;

    // ✅ Validate input
    if (!newPercentage || newPercentage <= 0) {
      return res.status(400).json({ message: 'Invalid amount value' });
    }


     const updatedPercentage = await AdminDailyGrowthPercentage.findOneAndUpdate(
      {},
      { Percentage : newPercentage },
      { new: true, upsert: true, setDefaultsOnInsert: true }
    );

    if (!updatedPercentage) {
      return res.status(404).json({ message: 'Failed in updating Percentage' });
    }

    return res.status(200).json({
      message: 'Percentage Update',
      Percentage: newPercentage,
    });

  } catch (error) {
    console.error('Error updating amount:', error);
    res.status(500).json({ message: 'Server error while updating amount' });
  }
};
