const bcrypt = require("bcryptjs");
const Admin = require("../models/adminModel");
const { generateToken } = require("../config/jwt");
const Sponsor = require("../models/SponsorRegisterationModel");
const SponsorDailyEarning = require("../models/SponsorDailyEarningModel");
const AdminDailyGrowthPercentage = require("../models/dailyGrowthPercentageModel");
const Customer = require("../models/customerModel");
const sendEmail = require("../config/emailSender");

exports.loginAdmin = async (req, res) => {
  try {
    const { username, password } = req.body;

    // Validate input
    if (!username || !password) {
      return res
        .status(400)
        .json({ message: "Username and password are required" });
    }

    // Find admin in MongoDB
    const admin = await Admin.findOne({ username });

    if (!admin) {
      return res.status(401).json({ message: "Invalid admin credentials" });
    }

    // Compare provided password with hashed password
    const isPasswordValid = await bcrypt.compare(password, admin.password);

    if (!isPasswordValid) {
      return res.status(401).json({ message: "Invalid admin credentials" });
    }

    // Generate JWT token
    const token = generateToken(admin, "admin");

    // Send response
    res.status(200).json({
      message: "Login successful",
      token,
      user: { id: admin._id, username: admin.username, type: "admin" },
    });
  } catch (error) {
    console.error("Admin login error:", error);
    res.status(500).json({ message: "Internal server error" });
  }
};

exports.registerSponsor = async (req, res) => {
  try {
    const { name, email, mobNumber, dob } = req.body;

    // Validation
    if (!name || !email || !mobNumber || !dob) {
      return res.status(400).json({
        message: "All fields are required",
      });
    }

    // Email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({
        message: "Invalid email format",
      });
    }

    // Check if sponsor already exists
    const existingSponsor = await Sponsor.findOne({ email });
    if (existingSponsor) {
      return res.status(409).json({
        message: "Sponsor with this email already exists",
      });
    }

    // Create new sponsor - sponsorId is auto-generated by the schema
    let newSponsor = await Sponsor.findOneAndUpdate(
      { email }, // match by email
      {
        name,
        email,
        mobNumber,
        dob: new Date(dob),
        password: "",
        registeredAt: new Date(),
      },
      { new: true, upsert: true, setDefaultsOnInsert: true }
    );
    const hashedPassword = await bcrypt.hash(newSponsor.sponsorId, 10);
    // Create new sponsor - sponsorId is auto-generated by the schema
    newSponsor = await Sponsor.findOneAndUpdate(
      { email }, // match by email
      {
        name,
        email,
        mobNumber,
        dob: new Date(dob),
        password: hashedPassword,
        registeredAt: new Date(),
      },
      { new: true, upsert: true, setDefaultsOnInsert: true }
    );

    sendMail(newSponsor.name, newSponsor.email, newSponsor.sponsorId);
    // Return response with the generated sponsorId
    res.status(201).json({
      message: "Sponsor registered successfully",
      sponsor: {
        sponsorId: newSponsor.sponsorId, // The auto-generated UUID
        name: newSponsor.name,
        email: newSponsor.email,
        mobNumber: newSponsor.mobNumber,
        dob: newSponsor.dob,
        registeredAt: newSponsor.registeredAt,
      },
    });
  } catch (error) {
    console.error("Sponsor registration error:", error);
    res.status(500).json({
      message: "Internal server error",
      error: error.message,
    });
  }
};

exports.sponsorList = async (req, res) => {
  try {
    const sponsors = await Sponsor.find({});
    res.json({ sponsors });
  } catch (error) {
    res
      .status(500)
      .json({ message: "Error fetching sponsors", error: error.message });
  }
};

exports.adminEarningStats = async (req, res) => {
  const { interval } = req.params;

  try {
    // 1️⃣ Find earnings document for the sponsor
    const record = await SponsorDailyEarning.find();
    console.log(record);

    if (!record) {
      return res
        .status(404)
        .json({ message: "No earnings found for this sponsor" });
    }

    // 2️⃣ Filter based on time range
    const now = new Date();
    let daysToShow = interval === "7days" ? 7 : interval === "30days" ? 30 : 90;
    const startDate = new Date();
    startDate.setDate(now.getDate() - daysToShow);

    let filteredRecords;
    for (const tempRecord of record) {
      filteredRecords = tempRecord.records.filter(
        (r) => new Date(r.date) >= startDate
      );
    }

    // 4️⃣ Map records to same format as mock data
    const formattedData = filteredRecords.map((r) => ({
      date: new Date(r.date).toISOString().split("T")[0],
      earnings: r.earnings,
      displayDate:
        r.displayDate ||
        new Date(r.date).toLocaleDateString("en-US", {
          month: "short",
          day: "numeric",
        }),
    }));

    //Total Invested Amount
    const result = await Customer.aggregate([
      { $group: { _id: null, totalInvested: { $sum: "$AmountInvested" } } },
    ]);

    const totalInvested = result[0]?.totalInvested || 0;
    // 5️⃣ Compute stats
    const stats = calculateStats(formattedData, totalInvested);

    let DailyPercentageGrowth = await AdminDailyGrowthPercentage.find();

    console.log(DailyPercentageGrowth);
    DailyPercentageGrowth = DailyPercentageGrowth[0].Percentage;

    // 4️⃣ Respond with structured data
    return res.status(200).json({
      dailyEarnings: formattedData,
      stats,
      totalinvestment: totalInvested,
      DailyPercentageGrowth,
    });
  } catch (err) {
    console.error("Error fetching sponsor earnings:", err);
    return res
      .status(500)
      .json({ message: "Server error fetching earnings", error: err.message });
  }
};

// 🔹 Helper function to calculate stats
const calculateStats = (records, totalInvested) => {
  const totalEarnings = records.reduce((sum, r) => sum + r.earnings, 0);

  return {
    totalEarnings,
    totalinvestment: totalInvested,
    daysCount: records.length,
  };
};

exports.updateDailyPercentage = async (req, res) => {
  try {
    const { newPercentage } = req.body;

    // ✅ Validate input
    if (!newPercentage || newPercentage <= 0) {
      return res.status(400).json({ message: "Invalid amount value" });
    }

    const updatedPercentage = await AdminDailyGrowthPercentage.findOneAndUpdate(
      {},
      { Percentage: newPercentage },
      { new: true, upsert: true, setDefaultsOnInsert: true }
    );

    if (!updatedPercentage) {
      return res.status(404).json({ message: "Failed in updating Percentage" });
    }

    return res.status(200).json({
      message: "Percentage Update",
      Percentage: newPercentage,
    });
  } catch (error) {
    console.error("Error updating amount:", error);
    res.status(500).json({ message: "Server error while updating amount" });
  }
};

exports.query = async (req, res) => {
  try {
    const { query } = req.body;
    sendQueryMail(query);
    return res.status(200).json();
  } catch (error) {
    console.error("Error updating amount:", error);
    res.status(500).json({ message: "Server error while updating amount" });
  }
};

const sendMail = async (name, email, sponsorId) => {
  try {
    const subject = "🎉 Sponsor Registration Successful - Your Account Details";

    const htmlContent = `
      <div style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
        <h2 style="color: #007BFF;">Welcome to Metafund Team, ${name}!</h2>
        <p>Thank you for registering as a sponsor. Your account has been successfully created.</p>

        <h3 style="margin-top: 20px;">Your Account Details:</h3>
        <table style="border-collapse: collapse; width: 100%; max-width: 400px;">
          <tr>
            <td style="padding: 8px; border: 1px solid #ddd; font-weight: bold;">Username</td>
            <td style="padding: 8px; border: 1px solid #ddd;">${name}</td>
          </tr>
          <tr>
            <td style="padding: 8px; border: 1px solid #ddd; font-weight: bold;">Sponsor ID</td>
            <td style="padding: 8px; border: 1px solid #ddd;">${sponsorId}</td>
          </tr>
          <tr>
            <td style="padding: 8px; border: 1px solid #ddd; font-weight: bold;">Password</td>
            <td style="padding: 8px; border: 1px solid #ddd;">${sponsorId}</td>
          </tr>
        </table>

        <p style="margin-top: 20px;">You can now log in using the above details.</p>

        <p style="color: #555;">If you did not request this registration, please contact our support team immediately.</p>

        <p style="margin-top: 30px;">Best regards,<br>
        <strong>Metafund Team</strong></p>
      </div>
    `;

    await sendEmail(
      email,
      subject,
      `Dear ${name},\n\nYour sponsor registration was successful.\n\nUsername: ${name}\nSponsor ID: ${sponsorId}\n\nBest regards,\nThe Sponsorship Team.`,
      htmlContent
    );

    console.log(`Confirmation mail sent to ${email}`);
  } catch (err) {
    console.error("Error sending email:", err.message);
  }
};

const sendQueryMail = async (query) => {
  try {
    const subject = "📩 New User Query Received";

    const htmlContent = `
      <div style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
        <h2 style="color: #007BFF;">New Query Submitted</h2>

        <p>Hello Admin,</p>
        <p>A user has submitted a new query from the website:</p>

        <div style="margin-top: 20px; padding: 12px; border: 1px solid #ddd; background-color: #f9f9f9; border-radius: 8px;">
          <p style="white-space: pre-line; color: #333;">${query}</p>
        </div>

        <p style="margin-top: 30px;">Please review and respond accordingly.</p>

        <p style="margin-top: 30px;">Best regards,<br>
        <strong>Metafund Support System</strong></p>
      </div>
    `;

    // Send email to admin
    await sendEmail(
      process.env.GMAIL_USER,
      subject,
      `New query received:\n\n${query}`,
      htmlContent
    );

    console.log("User query sent to admin.");
  } catch (err) {
    console.error("Error sending query email:", err.message);
  }
};
